#  Copyright (c) 2022 Huawei Device Co., Ltd.
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#####################################################
#     below is the format of defining event         #
#####################################################
#domain: domain name.  [Only one domain name can be defined at the top]
#
#author: the author name who defined this event.
#date: the date when this event was defined, format is YYYY-MM-DD.
#logged: source file which refer to this event.
#usage: the usage of this event.
#//Define event name and event properties.
#@EVENT_NAME: the event definition part begin.
#  // __BASE is used for defining the basic info of the event.
#  // "type" optional values are: FAULT, STATISTICS, SECURITY, BEHAVIOR.
#  // "level" optional values are: CRITICAL, MINOR.
#  // "tag" set tags with may used by subscriber of this event, multiple tags devided by space.
#  // "desc" full description of this event.
#  @PARAMETER: {type: parameter type, arrsize: array length(optional), desc: parameter description}.
#  // follow the __BASE block, each line defines a parameter of this event.
#  // "type" optional values are: INT8, UINT8, INT16, UINT16, INT32, UINT32, INT64, UINT64, FLOAT, DOUBLE, STRING.
#  // "arrsize" of the parameter is an array, set a non-zero value.
#  // "desc" full description of this parameter.

#####################################################
#   Example of some hiviewdfx events definition     #
#####################################################

domain: DISTAUDIO

DAUDIO_INIT:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: daudio init sa event}
  SAID: {type: INT32, desc: daudio SAID}
  MSG: {type: STRING, desc: daudio init sa event}

DAUDIO_EXIT:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: daudio release sa event}
  SAID: {type: INT32, desc: daudio SAID}
  MSG: {type: STRING, desc: daudio release sa event}

DAUIDO_REGISTER:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: daudio register event}
  DEVID: {type: STRING, desc: daudio devId}
  DHID: {type: STRING, desc: daudio dhId}
  MSG: {type: STRING, desc: daudio register event}

DAUDIO_UNREGISTER:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: daudio unregister event}
  DEVID: {type: STRING, desc: daudio devId}
  DHID: {type: STRING, desc: daudio dhId}
  MSG: {type: STRING, desc: daudio unregister event}

DAUDIO_OPEN:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: daudio open event}
  DEVID: {type: STRING, desc: daudio devId}
  DHID: {type: STRING, desc: daudio dhId}
  MSG: {type: STRING, desc: daudio open event}

DAUDIO_CLOSE:
  __BASE: {type: BEHAVIOR, level: MINOR, desc: daudio close event}
  DEVID: {type: STRING, desc: daudio devId}
  DHID: {type: STRING, desc: daudio dhId}
  MSG: {type: STRING, desc: daudio close event}

DAUDIO_INIT_FAIL:
  __BASE: {type: FAULT, level: CRITICAL, desc: daudio sa start fail occured}
  SAID: {type: INT32, desc: daudio SAID}
  ERRCODE: {type: INT32, desc: daudio init fail error code}
  MSG: {type: STRING, desc: daudio sa start fail info}


DAUDIO_REGISTER_FAIL:
  __BASE: {type: FAULT, level: CRITICAL, desc: daudio register fail occured}
  DEVID: {type: STRING, desc: daudio devId}
  DHID: {type: STRING, desc: daudio dhId}
  ERRCODE: {type: INT32, desc: daudio register fail error code}
  MSG: {type: STRING, desc: daudio register fail info}

DAUDIO_UNREGISTER_FAIL:
  __BASE: {type: FAULT, level: CRITICAL, desc: daudio unregister fail occured}
  DEVID: {type: STRING, desc: daudio devId}
  DHID: {type: STRING, desc: daudio dhId}
  ERRCODE: {type: INT32, desc: daudio unregister fail error code}
  MSG: {type: STRING, desc: daudio unregister fail info}

DAUDIO_OPT_FAIL:
  __BASE: {type: FAULT, level: CRITICAL, desc: daudio operate fail occured}
  ERROR_CODE: {type: INT32, desc: daudio init process fail error code}
  MSG: {type: STRING, desc: daudio operate fail info}