package ohos.hdi.distributed_audio.audio.v1_0;

enum AudioChannelModeHAL {
    AUDIO_CHANNEL_NORMAL = 0,
    AUDIO_CHANNEL_BOTH_LEFT = 1,
    AUDIO_CHANNEL_BOTH_RIGHT = 2,
    AUDIO_CHANNEL_EXCHANGE = 3,
    AUDIO_CHANNEL_MIX = 4,
    AUDIO_CHANNEL_LEFT_MUTE = 5,
    AUDIO_CHANNEL_RIGHT_MUTE = 6,
    AUDIO_CHANNEL_BOTH_MUTE = 7,
};
enum AudioDrainNotifyTypeHAL {
    AUDIO_DRAIN_NORMAL_MODE = 0,
    AUDIO_DRAIN_EARLY_MODE = 1,
};
enum AudioPortPassthroughModeHAL {
    PORT_PASSTHROUGH_LPCM = 1,
    PORT_PASSTHROUGH_RAW = 2,
    PORT_PASSTHROUGH_HBR2LBR = 4,
    PORT_PASSTHROUGH_AUTO = 8,
};
enum AudioPortDirectionHAL {
    PORT_OUT = 1,
    PORT_IN = 2,
    PORT_OUT_IN = 3,
};
enum AudioPortPin {
    PIN_NONE = 0,
    PIN_OUT_SPEAKER = 1,
    PIN_OUT_HEADSET = 2,
    PIN_OUT_LINEOUT = 4,
    PIN_OUT_HDMI = 8,
    PIN_OUT_USB = 16,
    PIN_OUT_USB_EXT = 32,
    PIN_OUT_DAUDIO_DEFAULT = 64,
    PIN_IN_MIC = 134217729,
    PIN_IN_HS_MIC = 134217730,
    PIN_IN_LINEIN = 134217732,
    PIN_IN_USB_EXT = 134217736,
    PIN_IN_DAUDIO_DEFAULT = 134217744,
};
enum AudioExtParamKeyHAL {
    AUDIO_EXT_PARAM_KEY_NONE = 0,
    AUDIO_EXT_PARAM_KEY_VOLUME = 1,
    AUDIO_EXT_PARAM_KEY_FOCUS = 2,
    AUDIO_EXT_PARAM_KEY_BUTTON = 3,
    AUDIO_EXT_PARAM_KEY_EFFECT = 4,
    AUDIO_EXT_PARAM_KEY_STATUS = 5,
    AUDIO_EXT_PARAM_KEY_LOWPOWER = 1000,

};
struct AudioDeviceDescriptorHAL {
    unsigned int portId;
    unsigned int pins;
    String desc;
};
struct AudioSceneDescriptorHAL {
    unsigned int id;
    struct AudioDeviceDescriptorHAL desc;
};
struct AudioPortHAL {
    unsigned int dir;
    unsigned int portId;
    String portName;
};
struct AudioAdapterDescriptorHAL {
    String adapterName;
    struct AudioPortHAL[] ports;
};
struct AudioTimeStampHAL {
    unsigned long tvSec;
    unsigned long tvNSec;
};
struct AudioSampleAttributesHAL {
    unsigned int type;
    unsigned int interleaved;
    unsigned int format;
    unsigned int sampleRate;
    unsigned int channelCount;
    unsigned int period;
    unsigned int frameSize;
    unsigned int isBigEndian;
    unsigned int isSignedData;
    unsigned int startThreshold;
    unsigned int stopThreshold;
    unsigned int silenceThreshold;
    unsigned int streamId;
};
struct AudioSubPortCapabilityHAL {
    unsigned int portId;
    unsigned int mask;
    String desc;
};
struct AudioPortCapabilityHAl {
    unsigned int deviceType;
    unsigned int deviceId;
    unsigned int hardwareMode;
    unsigned int formatNum;
    unsigned int[] formats;
    unsigned int sampleRateMasks;
    unsigned int channelMasks;
    unsigned int channelCount;
    unsigned int subPortsNum;
    struct AudioSubPortCapabilityHAL subPorts;
};
struct AudioDevExtInfoHAL {
    int moduleId;
    unsigned int type;
    unsigned char[] desc;
};
struct AudioMixExtInfoHAL {
    int moduleId;
    int streamId;
};
struct AudioSessionInfoHAL {
    unsigned int sessionType;
};
struct AudioRouteNodeHAL {
    int portId;
    unsigned int role;
    unsigned int type;
    struct AudioDevExtInfoHAL device;
    struct AudioMixExtInfoHAL mix;
    struct AudioSessionInfoHAL session;
};
struct AudioRouteHAL {
    struct AudioRouteNodeHAL[] sources;
    struct AudioRouteNodeHAL[] sinks;
};
struct AudioMmapBufferDescripterHAL {
    int memoryFd;
    int totalBufferFrames;
    int transferFrameSize;
    int isShareable;
};

