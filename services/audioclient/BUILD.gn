# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import("../../distributedaudio.gni")

config("daudio_client_pub_config") {
  include_dirs = [ "interface" ]
}

ohos_shared_library("distributed_audio_sink_client") {
  include_dirs = [ "//third_party/json/include" ]

  include_dirs += [
    "${audio_client_path}/interface",
    "${audio_client_path}/micclient/include",
    "${audio_client_path}/spkclient/include",
    "${audio_processor_path}/encodeprocessor/include",
    "${audio_processor_path}/decodeprocessor/include",
    "${audio_processor_path}/interface",
    "${audio_transport_path}/audiochannel/interface",
    "${audio_transport_path}/audiochannel/audiodatachannel/include",
    "${audio_transport_path}/decodetransport/include",
    "${audio_transport_path}/encodetransport/include",
    "${audio_transport_path}/interface",
    "${common_path}/dfx_utils/include",
    "${common_path}/include",
    "${fwk_common_path}/utils/include",
    "${services_path}/common/audioeventcallback",
    "${services_path}/common/audiodata/include",
    "${services_path}/common/audioparam",
  ]

  if (distributed_audio_extension) {
    include_dirs += [
      "${distributedaudio_ext_path}/services/audioclient/directmicclient/include",
      "${distributedaudio_ext_path}/services/audioclient/directspkclient/include",
    ]
  }

  public_configs = [ ":daudio_client_pub_config" ]

  sources = [
    "${audio_client_path}/micclient/src/dmic_client.cpp",
    "${audio_client_path}/spkclient/src/dspeaker_client.cpp",
  ]

  if (distributed_audio_extension) {
    sources += [
      "${distributedaudio_ext_path}/services/audioclient/directmicclient/src/direct_dmic_client.cpp",
      "${distributedaudio_ext_path}/services/audioclient/directspkclient/src/direct_dspeaker_client.cpp",
    ]
  }

  deps = [
    "${audio_transport_path}/decodetransport:distributed_audio_decode_transport",
    "${audio_transport_path}/encodetransport:distributed_audio_encode_transport",
    "${services_path}/common:distributed_audio_utils",
  ]

  external_deps = [
    "audio_framework:audio_capturer",
    "audio_framework:audio_client",
    "audio_framework:audio_renderer",
    "c_utils:utils",
    "drivers_interface_audio:libaudio_proxy_1.0",
    "hdf_core:libhdf_ipc_adapter",
    "hdf_core:libhdi",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
  ]

  defines = [
    "HI_LOG_ENABLE",
    "LOG_DOMAIN=0xD004100",
  ]

  subsystem_name = "distributedhardware"
  part_name = "distributed_audio"
}
