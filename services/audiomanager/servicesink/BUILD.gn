# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import(
    "//foundation/distributedhardware/distributed_audio/distributedaudio.gni")

ohos_shared_library("distributed_audio_sink") {
  include_dirs = [
    "//commonlibrary/c_utils/base/include",
    "//third_party/json/include",
    "//utils/system/safwk/native/include",
    "//foundation/communication/dsoftbus/interfaces/kits/transport",
    "//base/hiviewdfx/hisysevent/interfaces/native/innerkits/hisysevent/include",
    "${fwk_common_path}/utils/include",
    "${mediastandardfwk_path}/audiocapturer/include",
    "${mediastandardfwk_path}/audiocommon/include",
    "${mediastandardfwk_path}/audiorenderer/include",
    "${mediastandardfwk_path}/audiomanager/include",
  ]

  include_dirs += [
    "include",
    "${common_path}/include",
    "${common_path}/dfx_utils/include",
    "${innerkits_path}/native_cpp/audio_sink/include",
    "${innerkits_path}/native_cpp/audio_source/include",
    "${audio_control_path}/controlsink/include",
    "${audio_client_path}/micclient/include",
    "${audio_client_path}/spkclient/include",
    "${services_path}/common/taskProcessor/include",
    "${services_path}/common/audioparam",
    "${services_path}/common/audioeventcallback",
    "${services_path}/common/audiodata/include",
    "${services_path}/audiomanager/managersink/include",
    "${audio_transport_path}/audioctrltransport/include",
    "${audio_transport_path}/audioctrltransport/interface",
    "${audio_transport_path}/interface",
    "${audio_transport_path}/encodetransport/include",
    "${audio_transport_path}/decodetransport/include",
    "${audio_transport_path}/audio_channel/include",
    "${audio_transport_path}/audiodatachannel/include",
    "${audio_processor_path}/encodeprocessor/include",
    "${audio_processor_path}/decodeprocessor/include",
    "${audio_processor_path}/interface",
    "${softbusadapter_path}/include",
  ]

  sources = [
    "${innerkits_path}/native_cpp/audio_sink/src/daudio_sink_proxy.cpp",
    "${innerkits_path}/native_cpp/audio_source/src/daudio_source_proxy.cpp",
    "src/daudio_sink_service.cpp",
    "src/daudio_sink_stub.cpp",
  ]

  deps = [
    "${audio_transport_path}/decodetransport:distributed_audio_decode_transport",
    "${common_path}:distributed_audio_utils",
    "${mediastandardfwk_path}/audiorenderer:audio_renderer",
    "${services_path}/audiomanager/managersink:distributed_audio_manager_sink",
  ]

  external_deps = [
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
    "multimedia_audio_framework:audio_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = [
    "HI_LOG_ENABLE",
    "DH_LOG_TAG=\"daudiosink\"",
    "LOG_DOMAIN=0xD004100",
  ]

  subsystem_name = "distributedhardware"

  part_name = "distributed_audio"
}
