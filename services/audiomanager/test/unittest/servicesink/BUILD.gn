# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import("//build/test.gni")
import("../../../../../distributedaudio.gni")

module_out_path = "distributed_audio/services/audiomanager/service_sink_test"

config("module_private_config") {
  visibility = [ ":*" ]

  include_dirs = [
    "${audio_framework_path}/audiopolicy/include",
    "//foundation/communication/dsoftbus/interfaces/kits/transport",
    "//third_party/json/include",
    "${fwk_common_path}/utils/include",
    "${mediastandardfwk_path}/audiocapturer/include",
    "${mediastandardfwk_path}/audiocommon/include",
    "${mediastandardfwk_path}/audiorenderer/include",
    "${mediastandardfwk_path}/audiomanager/include",
  ]

  include_dirs += [
    "${audio_client_path}/micclient/include",
    "${audio_client_path}/spkclient/include",
    "${audio_control_path}/controlsink/include",
    "${audio_processor_path}/decodeprocessor/include",
    "${audio_processor_path}/encodeprocessor/include",
    "${audio_processor_path}/interface",
    "${audio_transport_path}/audiochannel/audiodatachannel/include",
    "${audio_transport_path}/audiochannel/interface",
    "${audio_transport_path}/audio_channel/include",
    "${audio_transport_path}/audioctrltransport/interface",
    "${audio_transport_path}/audioctrltransport/include",
    "${audio_transport_path}/audiodatachannel/include",
    "${audio_transport_path}/audiotransportstatus/include",
    "${audio_transport_path}/audiotransportstatus/interface",
    "${audio_transport_path}/decodetransport/include",
    "${audio_transport_path}/encodetransport/include",
    "${audio_transport_path}/interface",
    "${common_path}/include",
    "${innerkits_path}/native_cpp/audio_sink/include",
    "${innerkits_path}/native_cpp/audio_source/include",
    "${services_path}/audiomanager/managersink/include",
    "${services_path}/audiomanager/servicesink/include",
    "${services_path}/audiomanager/test/unittest/managersink/include",
    "${services_path}/audiomanager/test/unittest/servicesink/include",
    "${services_path}/common/audiodata/include",
    "${services_path}/common/audioeventcallback",
    "${services_path}/common/audioparam",
    "${services_path}/common/taskProcessor/include",
  ]
}

## UnitTest daudio_sink_dev_test
ohos_unittest("DaudioSinkServiceTest") {
  module_out_path = module_out_path

  sources = [ "${services_path}/audiomanager/test/unittest/servicesink/src/daudio_sink_service_test.cpp" ]

  configs = [ ":module_private_config" ]

  deps = [
    "${services_path}/audiomanager/servicesink:distributed_audio_sink",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "audio_framework:audio_capturer",
    "audio_framework:audio_client",
    "audio_framework:audio_renderer",
    "c_utils:utils",
    "hisysevent_native:libhisysevent",
    "hitrace_native:hitrace_meter",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
}

group("service_sink_test") {
  testonly = true
  deps = [ ":DaudioSinkServiceTest" ]
}
